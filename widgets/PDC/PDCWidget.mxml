<?xml version="1.0" encoding="utf-8"?>
<!--
 | Version 10.2
 | Copyright 2008 Esri
 |
 | Licensed under the Apache License, Version 2.0 (the "License");
 | you may not use this file except in compliance with the License.
 | You may obtain a copy of the License at
 |
 |    http://www.apache.org/licenses/LICENSE-2.0
 |
 | Unless required by applicable law or agreed to in writing, software
 | distributed under the License is distributed on an "AS IS" BASIS,
 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 | See the License for the specific language governing permissions and
 | limitations under the License.
-->
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:mxeffects="com.adobe.ac.mxeffects.*"
				   xmlns:widgets="widgets.*"
				   xmlns:viewer="com.esri.viewer.*"
				   xmlns:esri="http://www.esri.com/2008/ags"
				   widgetConfigLoaded	="init()" >
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace mxeffects "com.adobe.ac.mxeffects.*";
		@namespace widgets "widgets.*";
		@namespace viewer "com.esri.viewer.*";
		@namespace esri "http://www.esri.com/2008/ags";


		.labelStyleName {
			textAlign:left;
		}

	</fx:Style>
	<fx:Script>
		<![CDATA[
			import com.esri.ags.FeatureSet;
			import com.esri.ags.Graphic;
			import com.esri.ags.SpatialReference;
			import com.esri.ags.components.supportClasses.TextField;
			import com.esri.ags.events.ExtentEvent;
			import com.esri.ags.events.GeometryServiceEvent;
			import com.esri.ags.events.LayerEvent;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.layers.ArcGISDynamicMapServiceLayer;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.symbols.PictureMarkerSymbol;
			import com.esri.ags.symbols.SimpleFillSymbol;
			import com.esri.ags.symbols.SimpleLineSymbol;
			import com.esri.ags.symbols.SimpleMarkerSymbol;
			import com.esri.ags.tasks.GeometryService;
			import com.esri.ags.tasks.JSONTask;
			import com.esri.ags.tasks.QueryTask;
			import com.esri.ags.tasks.supportClasses.Query;
			import com.esri.viewer.utils.Hashtable;

			import flash.events.Event;
			import flash.net.navigateToURL;

			import flashx.textLayout.formats.TextAlign;

			import mx.charts.GridLines;
			import mx.collections.ArrayList;
			import mx.containers.Form;
			import mx.containers.FormItem;
			import mx.containers.Grid;
			import mx.containers.GridItem;
			import mx.containers.GridRow;
			import mx.containers.HBox;
			import mx.containers.VBox;
			import mx.controls.Alert;
			import mx.controls.Button;
			import mx.controls.HRule;
			import mx.controls.Label;
			import mx.controls.LinkButton;
			import mx.controls.Text;
			import mx.controls.TextArea;
			import mx.controls.TextInput;
			import mx.core.UIComponent;
			import mx.formatters.DateFormatter;
			import mx.formatters.Formatter;
			import mx.managers.CursorManager;
			import mx.rpc.*;

			import org.osmf.layout.HorizontalAlign;

			import spark.collections.SortField;
			import spark.components.RichEditableText;
			import spark.components.TextArea;
			import spark.filters.GlowFilter;

			import widgets.PDC.ui.checkbox.WidgetCheckBox;
			import widgets.PDC.utils.ActiveHazards;
			import widgets.PDC.utils.GraphicsLayerExtended;
			private var _activeHighlightLayer:GraphicsLayer;
			private var infoPopsfieldArr:Array = new Array();
			private var fieldNames:Array = new Array();
			private var fieldTypes:Hashtable= new Hashtable()
			private var activeHazards	:ActiveHazards;
			private var graphicsLayers	: Array;
			private var maptip:Object = new Object();
			private var infoPopup:Array =new Array();
			private var tipString:String;
			private var myGraphic:Graphic= new Graphic;
			private var geometryService:GeometryService;


			private var genericJson:JSONTask= new JSONTask();
			private var pdcMapServerInitalExtent:Extent= new Extent();

			private var isFirstOpened:Boolean=false;
			private var titleField:String=''
			private var strServiceToken:String="";

			private function get activeHighlightLayer():GraphicsLayer
			{
				return _activeHighlightLayer;
			}

			private function set activeHighlightLayer(value:GraphicsLayer):void
			{
				if (_activeHighlightLayer != value)
				{
					_activeHighlightLayer = value;
					clearSelectionHighlights();
				}
			}

			private function init():void {
				geometryService = new GeometryService(configXML.geometryservice.@url.toString());
				geometryService.addEventListener(GeometryServiceEvent.PROJECT_COMPLETE,projectCompleteHandler);
				activeHazards = new ActiveHazards();

				if(configXML)
				{
					activeHazards.REST = configXML.mapservice.toString();
					strServiceToken=configXML.mapservice.@token.toString();
					var layers:Array = new Array();
					var legendInfo:Object = new Object();
					var layersXML:XMLList = configXML.layers.layer;
					genericJson.url=activeHazards.REST;

					var urlVars:URLVariables = new URLVariables();
					urlVars.f = "json";
					urlVars.json='true'


					for (var i:int=0;i<layersXML.length();i++)
					{
						trace(i+'.............');
						infoPopup[i]= layersXML[i].Infopopup.titlefield.toString();
						fieldNames= new Array();
						for (var j:int=0;j<layersXML[i].Infopopup.fields.fieldname.length();j++)
						{
							var objfield:Object= new Object();
							trace(j+'========='+layersXML[i].Infopopup.fields.fieldname[j].@label[0].toString());
							fieldNames.push(layersXML[i].Infopopup.fields.fieldname[j].toString());

							objfield.label		=	layersXML[i].Infopopup.fields.fieldname[j].@label[0].toString();
							objfield.displayType=	layersXML[i].Infopopup.fields.fieldname[j].@displaytype[0].toString();
							fieldTypes.add(layersXML[i].Infopopup.fields.fieldname[j].toString(),objfield);

						}






						legendInfo[layersXML[i].title] = {	description	: layersXML[i].legend.description,
							metadataURL	: configXML.metadata.@url.toString() +"/atlas/metadata_abstracts/metadata_summary_ims_mde.jsp?metadata="+ layersXML[i].legend.metadataID.toString(),
							items		: layersXML[i].legend.items.split(",")};

						layers.push({	title	: layersXML[i].title,
							active	: layersXML[i].visible.toString() == "true",
							restId	: parseInt(layersXML[i].id.toString()),
							fields	: layersXML[i].fields.split(","),
							infoPopup  : infoPopup});

						infoPopsfieldArr[i]=fieldNames;
					}
					var fieldObj:Object=fieldTypes.find('EVENT_TYPE');

					activeHazards.layers = layers;
					activeHazards.legendInfo = legendInfo;

				graphicsLayers = new Array(activeHazards.layers.length);
				activeHazards.addEventListener(WidgetCheckBox.STATUS, handleCheckBox, false, 0, true);

				for(i=activeHazards.layers.length-1;i>-1;i--)
				{
					var graphicsLayer:GraphicsLayerExtended = new GraphicsLayerExtended();
					var query:Query = new Query();
					query.outFields = activeHazards.layers[i].fields;
					query.returnGeometry = true;

					var queryTask:QueryTask = new QueryTask();
					queryTask.token=strServiceToken;
					queryTask.url = graphicsLayer.url = activeHazards.REST + activeHazards.layers[i].restId;
					queryTask.useAMF=false;
					var layerInfo:Object = {id			: activeHazards.layers[i].restId,
						title		: activeHazards.layers[i].title,
						active		: activeHazards.layers[i].active,
						layer		: graphicsLayer,
						maptip		: activeHazards.layers[i].maptip,
						query		: query,
						queryTask	: queryTask,
						responder	: new AsyncResponder(onResult, onFault, {id:i})}

					graphicsLayers[i]= layerInfo;
					map.addLayer(graphicsLayer);
				}

				Canvas.rawChildren.addChild(activeHazards);
				activeHazards.init(this);
				map.addEventListener(ExtentEvent.EXTENT_CHANGE, handleExtentChange);
				handleExtentChange(null);
				}
				else
				{
					Alert.show('Config not found');
				}
			}






			private function handleExtentChange(event:ExtentEvent):void {
				var anyLayerVisible:Boolean;

				for(var i:int=activeHazards.layers.length-1;i>-1;i--){
					if(graphicsLayers[i].active){
						executeQuery(i);
						anyLayerVisible = true;
					};
				};
				if(anyLayerVisible){

				};
			};

			private function executeQuery(id:int):void {
				graphicsLayers[id].query.geometry = map.extent;
				graphicsLayers[id].queryTask.execute(graphicsLayers[id].query, graphicsLayers[id].responder);
			};

			private function handleCheckBox(event:Event):void {
				var id:int = activeHazards.layerID;
				graphicsLayers[id].active = activeHazards.layers[id].active;
				if(graphicsLayers[id].active){
					graphicsLayers[id].layer.visible = true;
					executeQuery(id);
				}else{
					graphicsLayers[id].layer.visible = false;
					var title:String=graphicsLayers[id].title.toString();
					if((title.toLowerCase())== ((titleField).toLowerCase()))
						map.infoWindow.hide();
				};
			};


			private function onResult(featureSet:com.esri.ags.FeatureSet, token:Object=null):void {

				graphicsLayers[token.id].layer.clear();
				var graphics:Array = [];

				var _graphic:Graphic;
				var outlineSymbol:SimpleLineSymbol;
				var polySymbol:SimpleFillSymbol;
				var _color:uint;
				var _code:String;

				for each (var graphic:Graphic in featureSet.features)
				{
					graphic.attributes.TOKEN_ID = token.id;
					graphics.push(graphic);
					if(graphicsLayers[graphic.attributes.TOKEN_ID].title == "Potential Track Area")
					{
						_graphic = new Graphic(graphic.geometry);
						_graphic.attributes=graphic.attributes;
						outlineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, 0xFFFFFF, 1, 2);
						polySymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, 0xFFFFFF, .3, outlineSymbol);
						_graphic.symbol = polySymbol;
					}else if(graphicsLayers[graphic.attributes.TOKEN_ID].title == "Tsunami Travel Time")
					{
						_graphic = new Graphic(graphic.geometry);
						_graphic.attributes=graphic.attributes;
						outlineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DOT, 0x000000, 1, 2);
						_graphic.symbol = outlineSymbol;
						_graphic.filters = [new spark.filters.GlowFilter(0xFFFFFF, 1, 6, 6, 4)];
					}
					else if(graphicsLayers[graphic.attributes.TOKEN_ID].title == "Storm Segments")
					{
						_graphic = new Graphic(graphic.geometry);
						_graphic.attributes=graphic.attributes;
						_code = graphic.attributes.SYMBOL_CODE.charAt(0);
						var _style:String = _code == "F" ? SimpleLineSymbol.STYLE_DASH : SimpleLineSymbol.STYLE_SOLID;
						_code = graphic.attributes.SYMBOL_CODE.charAt(2);
						_color = _code == "T" ? 0xFF0000 : (_code == "Y" ? 0xF8A000 : (_code == "S" ? 0x00FF00 : 0xC4C4C4));
						_graphic.symbol = new SimpleLineSymbol(_style, _color, 1, 10);
					}
					else if(graphicsLayers[graphic.attributes.TOKEN_ID].title == "Storm Winds")
					{
						_graphic = new Graphic(graphic.geometry);
						_graphic.attributes=graphic.attributes;
						_code = graphic.attributes.SYMBOL_CODE.charAt(2);
						_color = _code == "S" ? 0xFFFF00 : (_code == "D" ? 0x00FF00 : 0xFF0000);
						outlineSymbol = new com.esri.ags.symbols.SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, _color, 1,10);
						polySymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, _color, .02, outlineSymbol);
						_graphic.symbol = polySymbol;
					}
					else
					{
						var hazardInfo:Object = activeHazards.bindedImages.getIcon(graphicsLayers[graphic.attributes.TOKEN_ID].id, graphic.attributes);
						_graphic = graphic;
						_graphic.symbol = new PictureMarkerSymbol(hazardInfo.icon);
					}

					maptip = graphicsLayers[graphic.attributes.TOKEN_ID].maptip;

					_graphic.addEventListener(MouseEvent.CLICK,onClickSHowInfoPopup);


					function onClickSHowInfoPopup(event:MouseEvent):void
					{
						var vbox:VBox= new VBox();
						vbox.setStyle("horizontalAlign","left");
						vbox.top=5;


						vbox.width= 300;
						vbox.height=160;



						var g:Graphic= event.currentTarget as Graphic;
						var fieldNames:Array= infoPopsfieldArr[g.attributes.TOKEN_ID];
						var infoPopupTitleField:String=infoPopup[g.attributes.TOKEN_ID];

						var hbxTitle:VBox= new VBox();
						var lblTitle:Label= new Label();
						var hLine:HRule= new HRule();
						hbxTitle.width=280;
						lblTitle.left=5;
						lblTitle.setStyle('fontWeight','bold');
						lblTitle.setStyle('color',getStyle('color'));
						lblTitle.text=infoPopupTitleField;
						hLine.percentWidth=100;
						hLine.height=1;
						hLine.alpha=0.6;
						hbxTitle.addChild(lblTitle);
						hbxTitle.addChild(hLine);
						vbox.addChild(hbxTitle);



						var grItemCol:HBox;



						for(var i:int=0;i<fieldNames.length;i++)
						{

							grItemCol= new HBox();

							grItemCol.setStyle("horizontalAlign","left");

							var fieldName:String=fieldNames[i];
							var str:String = g.attributes[fieldName]
							var fieldObj:Object=fieldTypes.find(fieldName);
							var label:Label= new Label()
							label.text=fieldObj.label ;
							label.width=100;
							var sep:Text= new Text();
							sep.text=":"
							if(str!=null)
							{
								trace(str);
							}
							switch(fieldObj.displayType.toString())
							{

								case "string":
								{
									var txt:Text= new Text();

									txt.width=150;


									trace(str);
									if(str!=null){
										txt.text=str;
										}
									else{
										txt.text='N/A';
									}
									txt.setStyle('color',getStyle('color'));
									grItemCol.addChild(label);
									grItemCol.addChild(sep);
									grItemCol.addChild(txt);
									vbox.addChild(grItemCol);
									break;
								}
								case "hyperlink":
								{
									var linkLabel:Label = new Label();

									var fieldLabel1:Label = new Label();
									var hbx2:HBox= new HBox();
									hbx2.percentWidth=100;
									hbx2.percentHeight=100;

									if(str!=null)
									{

										if(str.length>25)
										{

										linkLabel.text =str;
										linkLabel.width=150;
										}
										else
											linkLabel.text =str;

									linkLabel.useHandCursor=true;
									linkLabel.buttonMode=true;
									linkLabel.mouseChildren=false;
									linkLabel.setStyle("textDecoration", "underline");
									linkLabel.setStyle("color" ,getStyle('color'));

									linkLabel.setStyle("textAlign" ,'left');

									linkLabel.addEventListener(MouseEvent.CLICK,hyperLink)
									hbx2.addChild(label);
									hbx2.addChild(linkLabel);
									grItemCol.addChild(label);
									grItemCol.addChild(sep);
									grItemCol.addChild(linkLabel);



									}
									else
									{

										grItemCol.addChild(label);

										linkLabel.text='N/A'
										hbx2.addChild(label);
										hbx2.addChild(linkLabel);
										grItemCol.addChild(label);
										grItemCol.addChild(sep);
										grItemCol.addChild(linkLabel);
									}




									vbox.addChild(grItemCol);
									function hyperLink(event:MouseEvent):void
									{
										var url:String = (event.currentTarget as Label).text;
										var urlRequest:URLRequest = new URLRequest(url);
										navigateToURL(urlRequest);

									}
									break;
									}
									case "date" :
									{
										var valLabel1:Label = new Label();
										var fieldLabel2:Label = new Label();
										fieldLabel2.text =fieldObj.label ;
										if(str!=null)
											valLabel1.text =""+ str;
										else
											valLabel1.text ='N/A';
										grItemCol.addChild(fieldLabel2);



									}
								}
							};



							map.infoWindow.width=400;
							map.infoWindow.height=400;
							map.infoWindow.label='';
							map.infoWindow.labelVisible=false;
							titleField=infoPopupTitleField;
							map.infoWindow.content=vbox;
							map.infoWindow.closeButtonVisible=true;
							map.infoWindow.closeButton.toolTip = "Close";
							switch(g.geometry.type)
							{
								case Geometry.MAPPOINT:{
									map.infoWindow.show(g.geometry as MapPoint);
									break;
								}
								case Geometry.POLYLINE:{
									map.infoWindow.show(g.geometry.extent.center as MapPoint);
									break;
								}
								case Geometry.POLYGON:{
									map.infoWindow.show(g.geometry.extent.center as MapPoint);
									break;
								}
							}

						}


						graphicsLayers[graphic.attributes.TOKEN_ID].layer.add(_graphic);

					};


				}

				private function clearSelectionHighlights():void
				{

					highlightGraphicsLayer.clear();
					map.removeLayer(activeHighlightLayer);
				}

				private function onFault(info:Object, token:Object=null):void {

				}

				private function showAboutPDC(event:MouseEvent):void {
					activeHazards.showAbout();
				}

				private function wTemplate_closedHandler(event:Event):void
				{
					map.infoWindow.hide();
					isFirstOpened=true;
					for(var i:int=activeHazards.layers.length-1;i>-1;i--)
					{
						graphicsLayers[i].layer.clear();
						(graphicsLayers[i].layer as GraphicsLayer).visible=false;


						map.removeLayer(map.getLayer(graphicsLayers[i].layer.name));
					}
					map.removeEventListener(ExtentEvent.EXTENT_CHANGE, handleExtentChange);
					trace(map.layerIds.length);
				}

				private function projectCompleteHandler(event:GeometryServiceEvent):void
				{


				}


				private function wTemplate_openHandler(event:Event):void
				{
					wTemplate.minimizeButton.toolTip="Minimize"
					wTemplate.closeButton.toolTip="Close"
					if(isFirstOpened==true){


						var anyLayerVisible:Boolean;
						for(var i:int=activeHazards.layers.length-1;i>-1;i--){
							if(graphicsLayers[i].active){
								executeQuery(i);
								anyLayerVisible = true;
								(graphicsLayers[i].layer as GraphicsLayer).visible=true;
							};
						};
						if(anyLayerVisible){

						};


					}else
						wTemplate.minimizeButton.toolTip="Minimize"
						wTemplate.closeButton.toolTip="Close"
						map.addEventListener(ExtentEvent.EXTENT_CHANGE, handleExtentChange);
				}

				protected function wTemplate_minimizedHandler(event:Event):void
				{
					map.infoWindow.hide();
				}

		]]>
	</fx:Script>

	<fx:Declarations>
		<esri:GraphicsLayer id="highlightGraphicsLayer"/>
	</fx:Declarations>
		<viewer:WidgetTemplate  open="wTemplate_openHandler(event)" maxHeight="520"  maxWidth="430"
						    minimized="wTemplate_minimizedHandler(event)" closed="wTemplate_closedHandler(event)" id="wTemplate" minHeight="480" minWidth="380" height="480"  width="400" >
		<s:Spacer height="10" />
		<mx:Canvas id="Canvas" width="100%" height="100%"/>


	</viewer:WidgetTemplate>
</viewer:BaseWidget>


